/**
 * A minimal Gruntfile.js file to demonstrate the invocation of
 * Grunt tasks from Maven using the fedtools-maven-plugin.
 *
 * @param grunt
 */


module.exports = function (grunt) {
  // load plugins
  require('load-grunt-tasks')(grunt);

  // load fedtools grunt tasks
  grunt.loadTasks('tasks');

  var pack = grunt.file.readJSON('package.json'),
    shifter = require('shifter'),
    path = require('path');

  /**
   * The properties.json should be shared between Maven
   * and Grunt to avoid redefining names/versions in each
   * build system.
   *
   * IMPORTANT: All tasks defined in initConfig are temporary implementations
   *            that will be replaced by Grunt plugins we will author that will
   *            contain the actual implementation of the 'build api'.
   *
   *            The current implementation in initConfig are purely for initial
   *            demonstration purpose.
   *
   */
  grunt.initConfig({

    pkg: grunt.file.readJSON('package.json'),

    clean: ['<%=pkg.paths.shifterbuild%>', '<%=pkg.paths.build%>'],
    /**
     * TODO: This is a palceholder task for the 'fedtools' linter task.
     * Currently, this task is checking all src and test src js files and
     * the Grunt build file.
     */
    jshint: {
      options: {
        'bitwise': true,
        'browser': true,
        'camelcase': true,
        'curly': true,
        'eqeqeq': true,
        'es3': false,
        'expr': false,
        'forin': true,
        'immed': true,
        'indent': 2,
        'latedef': true,
        'maxlen': 120,
        'newcap': true,
        'node': true,
        'noarg': true,
        'noempty': true,
        'nonew': true,
        'onevar': true,
        'plusplus': true,
        'quotmark': 'single',
        'undef': true,
        'unused': true,
        'strict': false,
        'trailing': true,
        'yui': true
      },
      files: ['Gruntfile.js',
        '<%=pkg.paths.flows%>/**/*.js',
        '<%=pkg.paths.bootstrap%>/**/*.js'
      ]
    },
    compass: {
      common: {
        options: {
          sassDir: '<%=pkg.paths.cssin%>',
          cssDir: '<%=pkg.paths.cssout%>'
        }
      }
    },
    cssmin: {
      combine: {
        files: {
          '<%=pkg.paths.build%>/css/common-css-skin-min.css': [
            '<%=pkg.paths.cssout%>/common-css-core.css',
            '<%=pkg.paths.cssout%>/skins/nx/common-css-skin.css',
            '<%=pkg.paths.cssout%>/skins/nxt/common-css-skin.css'
          ]
        }
      }
    },
    /**
     * TODO: This is a placeholder task for the 'fedtools' minification task.
     * Currently, this task is minifying all js in the source directory and
     * placing the minified files in the maven output folder
     */
    'fedtools-min': {
      common: {
        files: {
          '<%=pkg.paths.build%>/common-bootstrap-min.js': [
            '<%=pkg.paths.shifterbuild%>/common/common.js',
            '<%=pkg.paths.bootstrap%>/common.js'
          ]
        }
      },
      flows: {
        files: {
          '<%=pkg.paths.build%>/{{FLOWNAME}}-bootstrap-min.js': [
            '<%=pkg.paths.shifterbuild%>/{{FLOWNAME}}/{{FLOWNAME}}.js',
            '<%=pkg.paths.bootstrap%>/{{FLOWNAME}}.js'
          ]
        }
      }
    },
    watch: {
      flows: {
        files: ['<%=pkg.paths.flows%>/**/*.js',
          '<%=pkg.paths.bootstrap%>/**/*.js',
          '<%=pkg.paths.cssin%>/**/*.scss'
        ],
        tasks: ['build'],
        options: {
          spawn: false
        }
      }
    },
    /**
     * TODO: This is a placeholder for the 'fedtools' concatination task.
     * Currently this task is treating each directory under the src/main/js
     * directory as a module, and will procide a concatinated version of
     * all js files within the 'module' directory.
     *
     * This approach is not robust/flexible, but works for demo.
     */
    concat: {
      options: {
        stripBanners: true,
        banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +
          '<%= grunt.template.today("yyyy-mm-dd") %> */'
      }
    },
    /**
     * TODO: This is a placeholder task for the 'fedtools' yuidoc task.
     *
     */
    yuidoc: {
      compile: {
        name: '<%=pkg.name%>',
        description: '<%=pkg.description%>',
        version: 'version from pom',
        url: 'wf.com',
        options: {
          paths: '<%=pkg.paths.src%>',
          //themedir: 'path/to/custom/theme/',
          outdir: '<%=pkg.paths.apidocs%>'
        }
      }
    },
    /**
     * TODO: This is a placeholder for the 'fedtools' unit testing task.
     *
     * This is not a long term solution, just for demo.
     */
    //nodeunit: {
    //  all: ['<%=pkg.paths.testsrc%>/**/*.js']
    //},
    /**
     * TODO: This is a placeholder for the 'fedtools' general documentation
     *       builder. Currently, this task will compile all md files in the
     *       src/site/js directory and place them in the target/site/js
     *       directory. Maven uses the target/site directory for its own
     *       site generation.
     */
    markdown: {
      all: {
        files: [{
          cwd: '<%=pkg.paths.docsrc%>/',
          expand: true,
          src: '*.md',
          dest: '<%=pkg.paths.docdest%>/',
          ext: '.html'
        }],
        options: {
          markdownOptions: {
            gfm: true
          }
        }
      }
    },
    /**
     * TODO: Delete, this is for demonstration of a Grunt task with a target,
     * that can have a Maven goal assigned to it.
     */
    log: {
      foo: 'I am from the "foo" target <%= pkg.name %>',
      bar: 'I am from the "bar" target'
    },
    /**
     * TODO: This is a placeholder task for the 'fedtools' 'serve' task.
     *
     * Currently, this task starts up a connect server to serve static assets
     * from both the source directory and the build directory.
     *
     * NOTE: I dont like serving directly from source, I think all static
     * content we server should HAVE to go through the build process to ensure
     * it is formatted, linted etc.. (ie - lets remove src/main/js are make
     * sure we are creating a -debug version in output folder)
     */
    connect: {
      server: {
        options: {
          port: 9090,
          protocol: 'http',
          debug: true,
          base: ['src/main/js', 'target/js']
        }
      }
    }

    //add tasks to be executes by 'api' tasks registered below.
  });

  grunt.registerTask('build', 'Running a full build ', function () {
    grunt.log.subhead('Grunt [ ' + this.name.cyan + ' ]');
    grunt.task.run('fedtools-shifter');
    grunt.task.run('fedtools-min');
    grunt.task.run('compass');
    grunt.task.run('cssmin');
  });

  grunt.registerTask('fedtools-shifter', 'Running shifter build ', function () {
    var pkg, cfg,
      self = this,
      done = self.async();

    grunt.log.subhead('Grunt [ ' + self.name.cyan + ' ]');
    pkg = grunt.config('pkg');
    cfg = {
      cwd: path.join(process.cwd(), pkg.paths.flows),
      walk: true,
      'build-dir': path.join(process.cwd(), pkg.paths.shifterbuild)
    };
    shifter.init(cfg, function () {
      grunt.log.ok(self.name + ' completed');
      done();
    });
  });

  grunt.registerTask('jsclean', 'Delete the built source files', function () {
    grunt.log.subhead('Grunt [ ' + this.name.cyan + ' ]');
    grunt.task.run('clean');
    grunt.log.ok(this.name + ' completed');
  });

  // The 'api' tasks invoked as part of the Maven lifecycle.
  /**
   * Reformat any source code according to
   * standards (indentation, line length, etc.)
   */
  grunt.registerTask('beautify', 'Running a beautifier on source', function () {
    grunt.log.subhead('Grunt [ ' + this.name.cyan + ' ]');
    grunt.task.run('jsbeautifier');
    grunt.log.ok(this.name + ' completed');
  });

  /**
   * Lint all source code to check for undesirable source.
   */
  grunt.registerTask('lint', 'Running a linter on source', function () {
    grunt.log.subhead(' Grunt [ ' + this.name.cyan + ' ]');
    grunt.task.run('jshint');
    grunt.log.ok(this.name + ' completed');
  });

  /**
   *
   */
  grunt.registerTask('concat-modules', 'your description', function () {

    grunt.file.expand({
      cwd: pack.js.buildmin + '/'
    }, '*').forEach(function (dir) {

      var concat = grunt.config.get('concat') || {};

      concat[dir] = {
        src: [pack.js.buildmin + '/' + dir + '/*.js'],
        dest: pack.js.buildmod + '/' + dir + '-v' + pack.version + '-min.js'
      };

      concat.options.banner = '/*! ' + dir + '<%= pkg.name %> - v<%= pkg.version %> - ' +
        '<%= grunt.template.today("yyyy-mm-dd") %> */';

      grunt.config.set('concat', concat);

    });

    grunt.task.run('concat');


  });

  /**
   * Generate minified version of all source code
   */
  grunt.registerTask('test', 'Running unit tests', function () {
    grunt.log.subhead('Grunt [ ' + this.name.cyan + ' ]');
    //grunt.task.run('nodeunit');
    grunt.log.ok(this.name + ' completed');
  });

  /**
   * Generate api documentation for all source code.
   */
  grunt.registerTask('api', 'Generating source docs', function () {
    grunt.log.subhead('Grunt [ ' + this.name.cyan + ' ]');
    grunt.task.run('yuidoc');
    grunt.log.ok(this.name + ' completed');
  });

  /**
   * Generate general documentation (markdown) and place resulting html files
   * in the output directory.
   */
  grunt.registerTask('docs', 'Generate general docs (markdown)', function () {
    grunt.log.subhead('Grunt [ ' + this.name.cyan + ' ]');
    grunt.task.run('markdown');
    grunt.log.ok(this.name + ' completed');
  });

  /**
   * An example multitask to validate execution from Maven.
   */
  grunt.registerMultiTask('log', 'Log stuff.', function () {
    grunt.log.subhead('Grunt [ ' + this.name.cyan + ' ]');
    grunt.log.writeln(this.target + ': ' + this.data);
  });

  /**
   * An example multitask to validate execution from Maven.
   */
  grunt.registerTask('init', 'Create project from template.', function () {
    grunt.log.subhead('Grunt [ ' + this.name.cyan + ' ]');
    grunt.log.ok(this.name + ' completed');
  });

  /**
   * For now, just print a message
   */
  grunt.registerTask('default', 'Print informitive message', function () {
    grunt.log.subhead('Grunt [ ' + this.name.cyan + ' ]');
    grunt.log.ok(this.name + ' completed');
  });

};
