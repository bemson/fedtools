package com.wellsfargo.wria2.fedtools.config;


import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.
  ReloadableResourceBundleMessageSource;
import org.springframework.validation.Validator;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
import org.springframework.web.servlet.config.annotation.
  DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.
  ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.
  WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.tiles3.TilesConfigurer;
import org.springframework.web.servlet.view.tiles3.TilesViewResolver;

//import org.springframework.context.annotation.*;

/**
 * Initialization of Spring beans.
 */
@Configuration
@EnableWebMvc
@ComponentScan(basePackages = {"com.wellsfargo.wria2.fedtools"})
public class WebMvcConfig extends WebMvcConfigurerAdapter {

  private static final String MESSAGE_SOURCE = "/WEB-INF/i18n/messages";
  //private static final String TILES = "/WEB-INF/tiles/tiles.xml";
  private static final String VIEWS = "/WEB-INF/views/**/views.xml";

  private static final String RESOURCES_HANDLER = "/resources/";

  private static final String RESOURCES_LOCATION = RESOURCES_HANDLER + "**";

  /**
   * Configure a message source.
   * @return
   */
  @Bean(name = "messageSource")
  public MessageSource configureMessageSource() {
    ReloadableResourceBundleMessageSource messageSource =
      new ReloadableResourceBundleMessageSource();
    messageSource.setBasename(MESSAGE_SOURCE);
    messageSource.setCacheSeconds(5);
    return messageSource;
  }

  /**
   * Add the TileViewResolver type.
   *
   * @return A TilesViewResolver
   */
  @Bean
  public TilesViewResolver configureTilesViewResolver() {
    return new TilesViewResolver();
  }

  /**
   * Configure Tiles.
   *
   * @return A TilesConfigurer
   */
  @Bean
  public TilesConfigurer configureTilesConfigurer() {
    TilesConfigurer configurer = new TilesConfigurer();
    configurer.setDefinitions(new String[] {/*TILES,*/ VIEWS});
    return configurer;
  }

  /**
   *
   * {@inheritDoc}
   */
  @Override
  public Validator getValidator() {
    LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean();
    validator.setValidationMessageSource(configureMessageSource());
    return validator;
  }

  /**
   *
   * {@inheritDoc}
   */
  @Override
  public void addResourceHandlers(final ResourceHandlerRegistry registry) {
    registry.addResourceHandler(RESOURCES_HANDLER).
      addResourceLocations(RESOURCES_LOCATION);
  }

  /**
   *
   * {@inheritDoc}
   */
  @Override
  public void configureDefaultServletHandling(final
    DefaultServletHandlerConfigurer configurer) {
    configurer.enable();
  }
}
